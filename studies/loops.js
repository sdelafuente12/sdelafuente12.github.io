/* LOOPS 

LOOPS ARE FUN! LOOPS CAN BE USED TO ACCOMPLISH A GREAT MANY TASKS. AT THE 
SIMPLEST LEVEL, LOOPS (LIKE CONDITIONAL
STATEMENTS)  RUN CODE BLOCKS BASED ON THEIR TRUTHINESS OR FALSINESS. BASED ON 
THE CODE BLOCK - YOUR LOOP WILL RUN AS LONG AS SPECIFIED. 

THERE ARE THREE KINDS OF LOOPS THAT ARE PARTICULARILY HELPUFUL. THOSE ARE FOR, 
FOR IN, AND WHILE. 
*/


/*1. FOR LOOPS 

THE FOR LOOP IS DESIGNED TO RUN A CODE BLOCK OVER AND OVER. THE FOR LOOP IS MADE
OF THREE PARTS, THESE PARTS WILL
INFORM THE LOOP ON HOW MANY TIMES IT MUST RUN. 
*/

// for (statement 1; statement 2; statement 3){
//   // code block to be executed
// }

// STATEMENT 1 REFERS TO THE STARTING POINT OF YOUR LOOP
// STATEMENT 2 REFERS TO THE ENDING POINT OF YOUR LOOP
// STATEMENT 3 REFERS TO HOW THAT LOOP WILL INCREMENT 

/* ONCE YOU HAVE GIVEN YOUR FOR LOOP THESE STATEMENTS, YOU CAN TELL IT "FOR AS 
LONG AS YOUR FOLLOWING THESE RULES, RUN
THIS CODE.".
*/

/*for( i = 0; i < example.length; i++) {
    console.log(example[i])
}*/

for (var i = 0; i < 10; i++){
  console.log(i);
}
//prints to console => 0,1,2,3,4,5,6,7,8,9

/* NOW IN THIS EXAMPLE WHAT WILL WILL PRINT TO THE CONSOLE WILL BE EXAMPLE 
VALUES AT THE PLACEMENT OF i. *IT'S 
IMPORTANT WHILE USING RETURN TO NOTE THAT ONCE SOMETHING IS RETURNED INSIDE OF 
A LOOP, THAT LOOP WILL NO LONGER RUN!
IF YOU MUST RETURN IT'S BEST TO DO SO OUTSIDE OF YOUR LOOP*
*/

/* FOR IN LOOPS

FOR IN LOOPS ARE USEFUL WHEN LOOPING THROUGH OBJECTS. AS YOU CAN SEE IN THE 
EXAMPLE ABOVE, THE FOR LOOPS THROUGH AN
INDEX, WHICH OBJECTS DO NOT HAVE. SINCE OBJECTS HAVE UNINDEXED KEY/VALUE PAIRS
WE WILL HAVE TO FIND A WAY TO TELL OUR
FOR IN LOOP WHERE TO START AND STOP AND WHAT TO LOOK FOR. *NOTE: IF WE ARE NOT 
CAREFUL ABOUT TELLING OUR LOOPS WHERE 
TO START AND STOP WE MIGHT END UP WITH AN INFINITE LOOP! THIS WILL CRASH YOUR 
PROGRAM*
*/ 
var me = {firstName:"Samantha", lastName:"De La Fuente", age:23}; 

var text = "";
var x;
for (x in me) {
  text += me[x];
  console.log(text);
}
//prints to console => 'SamanthaDe La Fuente23'

/* SO IF WE LOOK AT THIS FOR LOOP IN LOOP WE CAN SEE THAT WE'VE GONE AHEAD AND 
DECLARED THE VARIABLE TEXT AS AN EMPTY 
STRING(THIS ALLOWS USE TO FILL IT LATER). VARIABLE X WILL STAND AS OUR PLACE 
(THINK OF IT LIKE AN INDEX SORTA). THEN WE
TELL IT IN THIS LOOP X WILL GO OVER ALL THE VALUES IN ME AND FOR EACH TIME THAT
HAPPENS ADD THE VALUE TO THE EMPTY
STRING TEXT. 
*/

/* 3. WHILE LOOPS

NOW IT'S TIME FOR THE WHILE LOOP! THIS GUY IS A LITTLE WEIRD SO LETS TRY TO 
FULLY UNDERSTAND WHY WE WOULD USE IT 
INSTEAD OF THE OTHER FOREMENTIONED LOOPS. IF I UNDERSTAND CORRECTLY, YOU CAN USE
WHILE LOOPS AS A SIMPLFIED 
VERSIONS OF THESE OTHER LOOPS. 
*/

/*while (condition) {
  // code block to be executed
}*/

/* IN WHILE LOOPS AS LONG AS THAT CONDITION IS TRUE THE CODE BLOCK UNDERNEATH
WILL BE EXECUTED. LETS LOOK AT A PRACTICAL
USE OF THE WHILE LOOP */


var temperature = ''; 
var i = 0;

while (i < 100) {
  temperature += "the temperature outside is  " + i++;
  console.log(temperature);
} // prints to console => 'the temperature outisde is 0''the temperature 
//outside is 1'... and so on

/* OK NOW THAT WE HAVE AN IDEA OF ALL THESE LOOPS DO, LETS DO SOME EXAMPLES 
TO REALLY GRASP WHAT THEY CAN DO. 

SO LETS SAY YOU WANT TO INCREMENT OVER AN ARRAY, BUT YOU WANT TO DO IT IN 
REVERSE. WHAT LOOP WOULD BE BEST?
WHAT MIGHT THAT LOOK LIKE? MAYBE SOMETHING LIKE THIS?
*/

var myArray = [0, 1, 2, 3, 4, 5];

for (var i = myArray.length - 1; i >= 0; i--){
    console.log(myArray[i]);
}

// prints to console => 5 4 3 2 1 0 

